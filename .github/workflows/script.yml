# dotnet test .\AlertaMongoDBTest
# dotnet run --project .\msAlertaMongoDB

# name: Pipeline
# on:
#  push:
#   branches: ["main"]
# jobs:
#   build:
#    name: Minha primeira pipeline test 
#    runs-on: ubuntu-latest
#    steps:     
#       - name: Setup .NETa
#         uses: actions/setup-dotnet@v2
#         with:
#           dotnet-version: 8.0.x
#       - name: Checkout do c√≥digo
#         uses: actions/checkout@v2
#       - name: Execu√ß√£o do teste de unidade 
#         run: dotnet test ./AlertaMongoDBTest/AlertaMongoDBTest.csproj --no-build --verbosity normal
#       - name: Publish API testes funcionass
#         run: dotnet publish ./msAlertaMongoDB/msAlertaMongoDB.csproj -c Release -o ./publish






name: Pipeline - msAlertaMongoDB

on:
  push:
    branches:
      - main

env:
  AZURE_WEBAPP_NAME: alertaapiapp           # Nome do seu App Service no Azure
  AZURE_RESOURCE_GROUP: myresourcegroup     # Nome do grupo de recursos
  AZURE_CONTAINER_REGISTRY: alertaregistryname.azurecr.io
  IMAGE_NAME: alertaapi
  DOCKERFILE_PATH: ./msAlertaMongoDB/Dockerfile

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout do c√≥digo-fonte
      - name: üì¶ Checkout do c√≥digo
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ Configura√ß√£o do .NET
      - name: ‚öôÔ∏è Setup .NET 8
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 8.0.x

      # 3Ô∏è‚É£ Restaura depend√™ncias e roda testes unit√°rios
      - name: üß™ Executar testes unit√°rios
        run: |
          dotnet restore ./msAlertaMongoDB/msAlertaMongoDB.csproj
          dotnet test ./AlertaMongoDBTest/AlertaMongoDBTest.csproj --no-build --verbosity normal

      # 4Ô∏è‚É£ Publica o projeto (gera a pasta publish)
      - name: üöÄ Publicar build
        run: dotnet publish ./msAlertaMongoDB/msAlertaMongoDB.csproj -c Release -o ./publish

      # 5Ô∏è‚É£ Login no Azure Container Registry (ACR)
      - name: üîê Login no Azure Container Registry
        uses: azure/docker-login@v2
        with:
          login-server: ${{ env.AZURE_CONTAINER_REGISTRY }}
          username: ${{ secrets.AZURE_ACR_USERNAME }}
          password: ${{ secrets.AZURE_ACR_PASSWORD }}

      # 6Ô∏è‚É£ Build e push da imagem Docker para o ACR
      - name: üê≥ Build e push da imagem Docker
        run: |
          docker build -f ${{ env.DOCKERFILE_PATH }} -t ${{ env.IMAGE_NAME }}:latest ./msAlertaMongoDB
          docker tag ${{ env.IMAGE_NAME }}:latest ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      # 7Ô∏è‚É£ Login no Azure (usando service principal)
      - name: üîê Login no Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # 8Ô∏è‚É£ Deploy no Azure Web App
      - name: ‚òÅÔ∏è Deploy no Azure Web App (Produ√ß√£o)
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          images: ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          slot-name: production
